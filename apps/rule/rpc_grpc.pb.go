// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: apps/rule/pb/rpc.proto

package rule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 同步告警规则
	SyncRule(ctx context.Context, in *SyncRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询告警规则
	QueryRule(ctx context.Context, in *QueryRuleRequest, opts ...grpc.CallOption) (*RuleSet, error)
	// 查询告警分组
	QueryGroup(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*GroupSet, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) SyncRule(ctx context.Context, in *SyncRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/robot.rule.RPC/SyncRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryRule(ctx context.Context, in *QueryRuleRequest, opts ...grpc.CallOption) (*RuleSet, error) {
	out := new(RuleSet)
	err := c.cc.Invoke(ctx, "/robot.rule.RPC/QueryRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryGroup(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*GroupSet, error) {
	out := new(GroupSet)
	err := c.cc.Invoke(ctx, "/robot.rule.RPC/QueryGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 同步告警规则
	SyncRule(context.Context, *SyncRuleRequest) (*emptypb.Empty, error)
	// 查询告警规则
	QueryRule(context.Context, *QueryRuleRequest) (*RuleSet, error)
	// 查询告警分组
	QueryGroup(context.Context, *QueryGroupRequest) (*GroupSet, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) SyncRule(context.Context, *SyncRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRule not implemented")
}
func (UnimplementedRPCServer) QueryRule(context.Context, *QueryRuleRequest) (*RuleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRule not implemented")
}
func (UnimplementedRPCServer) QueryGroup(context.Context, *QueryGroupRequest) (*GroupSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroup not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_SyncRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SyncRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.rule.RPC/SyncRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SyncRule(ctx, req.(*SyncRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.rule.RPC/QueryRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryRule(ctx, req.(*QueryRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.rule.RPC/QueryGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryGroup(ctx, req.(*QueryGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "robot.rule.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncRule",
			Handler:    _RPC_SyncRule_Handler,
		},
		{
			MethodName: "QueryRule",
			Handler:    _RPC_QueryRule_Handler,
		},
		{
			MethodName: "QueryGroup",
			Handler:    _RPC_QueryGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/rule/pb/rpc.proto",
}
