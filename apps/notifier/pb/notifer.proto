syntax = "proto3";
package robot.notifier;
option go_package = "github.com/Duke1616/alertmanager-wechat-robot/apps/notifier";

import public "google/protobuf/timestamp.proto";
import public "google/protobuf/Empty.proto";
import "apps/policy/pb/policy.proto";
import "apps/alert/pb/alert.proto";

service RPC {
  // 接收报警信息，进行转换
  rpc SendWechatRobot(NotificationInfo) returns(google.protobuf.Empty);
  // 发送报警信息到企业微信 Robot
  rpc TransFormToWechat(NotificationWechat) returns(Message);
}

message NotificationInfo {
  // 发送target名称
  // @gotags: bson:"name" json:"name"
  string name = 1;
  // 报警详细信息
  // @gotags: bson:"notification" json:"notification"
  Notification notification = 2;
}

message Notification {
  // 如果至少有一个警报正在触发，则定义为触发，否则已解决
  // @gotags: bson:"status" json:"status"
  string status = 1;
  // 接收者
  // @gotags: bson:"receiver" json:"receiver"
  string receiver = 2;
  // 组标签
  // @gotags: bson:"groupLabels" json:"groupLabels"
  map<string, string> group_labels = 3;
  // 通用标签
  // @gotags: bson:"commonLabels" json:"commonLabels"
  map<string, string> common_labels = 4;
  // 通用注解
  // @gotags: bson:"commonAnnotations" json:"commonAnnotations"
  map<string, string> common_annotations = 5;
  // 外部网址
  // @gotags: bson:"externalURL" json:"externalURL"
  string external_url = 6;
  // 警报信息
  // @gotags: bson:"alerts" json:"alerts"
  repeated alert.Alert alerts = 7;
}

message NotificationWechat {
  // 报警详细信息
  // @gotags: bson:"mention" json:"mention"
  policy.Mention mention = 1;
  // 报警详细信息
  // @gotags: bson:"notification" json:"notification"
  Notification notification = 2;
}

message Message {
  // 消息类型
  // @gotags: bson:"msgtype" json:"msgtype"
  string msgtype = 1;
  // 消息主题
  // @gotags: bson:"markdown" json:"markdown"
  Markdown markdown = 2;
}

message Markdown {
  // 消息主题
  // @gotags: bson:"content" json:"content"
  string content = 1;
}