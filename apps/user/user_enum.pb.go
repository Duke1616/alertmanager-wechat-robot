// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package user

import (
	"bytes"
	"fmt"
	"strings"
)

// ParseUSER_TYPEFromString Parse USER_TYPE from string
func ParseUSER_TYPEFromString(str string) (USER_TYPE, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := USER_TYPE_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown USER_TYPE: %s", str)
	}

	return USER_TYPE(v), nil
}

// Equal type compare
func (t USER_TYPE) Equal(target USER_TYPE) bool {
	return t == target
}

// IsIn todo
func (t USER_TYPE) IsIn(targets ...USER_TYPE) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t USER_TYPE) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *USER_TYPE) UnmarshalJSON(b []byte) error {
	ins, err := ParseUSER_TYPEFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseDESCRIBE_BYFromString Parse DESCRIBE_BY from string
func ParseDESCRIBE_BYFromString(str string) (DESCRIBE_BY, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := DESCRIBE_BY_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown DESCRIBE_BY: %s", str)
	}

	return DESCRIBE_BY(v), nil
}

// Equal type compare
func (t DESCRIBE_BY) Equal(target DESCRIBE_BY) bool {
	return t == target
}

// IsIn todo
func (t DESCRIBE_BY) IsIn(targets ...DESCRIBE_BY) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t DESCRIBE_BY) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *DESCRIBE_BY) UnmarshalJSON(b []byte) error {
	ins, err := ParseDESCRIBE_BYFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
